{
    "Spectral": {
        "Curve distance": {
            "Complexity": "Log",
            "description": "Computes the curve distance of a dataset.",
            "free parameters": "",
            "function": "curve_distance",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "Carina Figueira, 2015.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Fundamental frequency": {
            "Complexity": "Linear",
            "cost": "100",
            "description": "Computes the fundamental frequency along the specified axis.For an harmonic signal,the fundamental frequency is the frequency so thats its integer multiple best explain the content of the signal spectrum.",
            "free parameters": "",
            "function": "fundamental_frequency",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "yesvaInstrumentation Library",
            "source": "yesvaInstrumentation Library",
            "use": "yes"
        },
        "Linear regression": {
            "Complexity": "Linear",
            "description": "Computes the linear regression of a data set.",
            "free parameters": "",
            "function": "linear_regression",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Max power spectrum": {
            "Complexity": "Linear",
            "description": "Compute power spectrum density along the specified axes and return the maximum value.",
            "free parameters": "",
            "function": "max_power_spectrum",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Maximum frequency": {
            "Complexity": "Linear",
            "description": "Compute the one-dimensional discrete Fourier Transform and with cumsum function find 95% of max frequency.",
            "free parameters": "",
            "function": "max_frequency",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Median frequency": {
            "Complexity": "Linear",
            "description": "Compute the one-dimensional discrete Fourier Transform and with cumsum function find 50% of max frequency.",
            "free parameters": "",
            "function": "median_frequency",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Spectral centroid": {
            "Complexity": "Linear",
            "description": "Computes the spectral centroid of a data set.",
            "free parameters": "",
            "function": "spectral_centroid",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral decrease": {
            "Complexity": "Linear",
            "description": "Computes the spectral decrease of a data set.",
            "free parameters": "",
            "function": "spectral_decrease",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral kurtosis": {
            "Complexity": "Linear",
            "description": "Computes the spectral kurtosis of a data set.",
            "free parameters": "",
            "function": "spectral_kurtosis",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral maximum peaks": {
            "Complexity": "Linear",
            "description": "Returns the number of maximum peaks of a data set.",
            "free parameters": "",
            "function": "spectral_maxpeaks",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Spectral roll-off": {
            "Complexity": "Linear",
            "description": "Computes the spectral roll-off of a dataset.",
            "free parameters": "",
            "function": "spectral_roll_off",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral roll-on": {
            "Complexity": "Linear",
            "description": "Computes the spectral roll-on of a dataset.",
            "free parameters": "",
            "function": "spectral_roll_on",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral skewness": {
            "Complexity": "Linear",
            "description": "Computes the spectral skewness of a data set.",
            "free parameters": "",
            "function": "spectral_skewness",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral slope": {
            "Complexity": "Linear",
            "description": "Computes the spectral slope of a data set.",
            "free parameters": "",
            "function": "spectral_slope",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral spread": {
            "Complexity": "Linear",
            "description": "Computes the spectral spread of a data set.",
            "free parameters": "",
            "function": "spectral_spread",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Spectral variation": {
            "Complexity": "Linear",
            "description": "Computes the spectral variation of a data set.",
            "free parameters": "",
            "function": "spect_variation",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Total energy": {
            "Complexity": "Linear",
            "description": "Computes the total energy of a data set.",
            "free parameters": "",
            "function": "total_energy",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        }
    },
    "Statistical": {
        "Histogram": {
            "Complexity": "Log",
            "cost": "10",
            "description": "The grouping of the data into bins, plotting the number of members in each bin against the bin number.",
            "free parameters": {
                "nbins": [
                    10
                ],
                "r": [
                    1
                ]
            },
            "function": "hist",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 3,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Interquartile range": {
            "Complexity": "Log",
            "description": "Computes the interquartile range for the provided sequence of values, a more robust estimation than the variance.",
            "free parameters": "",
            "function": "calc_iqr",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Kurtosis": {
            "Complexity": "Log",
            "description": "Computes the kurtosis (Pearson) of a data set.",
            "free parameters": "",
            "function": "kurtosis",
            "imports": "from scipy.stats.stats import kurtosis",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Zwillinger, D. and Kokoska, S. (2000). CRC Standard Probability and Statistics Tables and Formulae. Champman and Hall: New York. 2000.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Max": {
            "Complexity": "Log",
            "description": "Computes the maximum value along the specified axis.",
            "free parameters": "",
            "function": "max",
            "imports": "from numpy import max",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Mean": {
            "Complexity": "Constant",
            "description": "Computes the arithmetic mean along the specified axis.",
            "free parameters": "",
            "function": "mean",
            "imports": "from numpy import mean",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Mean absolute deviation": {
            "Complexity": "Linear",
            "description": "Computes the mean absolute deviation for the provided sequence of values, a more robust estimation than the variance.",
            "free parameters": "",
            "function": "calc_meanad",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Median": {
            "Complexity": "Log",
            "description": "Computes the median along the specified axis.",
            "free parameters": "",
            "function": "median",
            "imports": "from numpy import median",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Median absolute deviation": {
            "Complexity": "Linear",
            "description": "Computes the median absolute deviation for the provided sequence of values, a more robust estimation than the variance.",
            "free parameters": "",
            "function": "calc_medad",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Min": {
            "Complexity": "Constant",
            "description": "Computes the minimum value along the specified axis.",
            "free parameters": "",
            "function": "min",
            "imports": "from numpy import min",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Root mean square": {
            "Complexity": "Log",
            "description": "The square root of the arithmetic mean (average) of the squares of the original values.",
            "free parameters": "",
            "function": "rms",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Skewness": {
            "Complexity": "Log",
            "description": "Computes the skewness of a data set.",
            "free parameters": "",
            "function": "skew",
            "imports": "from scipy.stats.stats import skew",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Zwillinger, D. and Kokoska, S. (2000). CRC Standard Probability and Statistics Tables and Formulae. Champman and Hall: New York. 2000. ",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Standard Deviation": {
            "Complexity": "Log",
            "description": "Computes the standard deviation along the specified axis.",
            "free parameters": "",
            "function": "std",
            "imports": "from numpy import std",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Variance": {
            "Complexity": "Log",
            "description": "Computes the variance of a data set.",
            "free parameters": "",
            "function": "var",
            "imports": "from numpy import var",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        }
    },
    "Temporal": {
        "Autocorrelation": {
            "Complexity": "Constant",
            "description": "Cross correlation of 1dimensional sequence.",
            "free parameters": "",
            "function": "autocorr",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Centroid": {
            "Complexity": "Linear",
            "description": "Computes the centroid of a data set.",
            "free parameters": "",
            "function": "centroid",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "FS",
            "reference": "G. Peeters, \u201cA large set of audio features for sound description (similarity and classification) in the cuidado project\u201d, 2004.",
            "source": "Python 2.7, Scipy Library",
            "use": "yes"
        },
        "Maximum peaks": {
            "Complexity": "Linear",
            "description": "Returns the number of maximum peaks of a data set.",
            "free parameters": "",
            "function": "maxpeaks",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Mean absolute diff": {
            "Complexity": "Log",
            "description": "Computes the mean of the absolute differences between two consequent values.",
            "free parameters": "",
            "function": "calc_meanadiff",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Mean diff": {
            "Complexity": "Constant",
            "description": "Computes the mean of the differences between two consequent values.",
            "free parameters": "",
            "function": "calc_meandiff",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Median absolute diff": {
            "Complexity": "Log",
            "description": "Computes the median of the absolute differences between two consequent values.",
            "free parameters": "",
            "function": "calc_medadiff",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Median diff": {
            "Complexity": "Log",
            "description": "Computes the median of the differences between two consequent values.",
            "free parameters": "",
            "function": "calc_meddiff",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Minimum peaks": {
            "Complexity": "Linear",
            "description": "Returns the number of minimum peaks of a data set.",
            "free parameters": "",
            "function": "minpeaks",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Signal distance": {
            "Complexity": "Linear",
            "description": "Computes the length of the signal.",
            "free parameters": "",
            "function": "distance",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "",
            "source": "",
            "use": "yes"
        },
        "Sum absolute diff": {
            "Complexity": "Log",
            "description": "Computes the sum of the absolute differences between two consequent values.",
            "free parameters": "",
            "function": "calc_sadiff",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "Python 2.7, Numpy Library",
            "source": "Python 2.7, Numpy Library",
            "use": "yes"
        },
        "Zero crossing rate": {
            "Complexity": "Log",
            "description": "The zero-crossing rate is a measure of the number of time the signal value cross the zero axe.",
            "free parameters": "",
            "function": "zero_cross",
            "imports": "from TSFEL import *",
            "metric": "euclidean",
            "number of features": 1,
            "parameters": "",
            "reference": "novaInstrumentation",
            "source": "novaInstrumentation",
            "use": "yes"
        }
    }
}
